{{- if not .Values.global.externalOpensearch.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "opensearch.fullname" . }}-config
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "opensearch.labels.standard" . | indent 4 }}
{{ include "opensearch-service.defaultLabels" . | indent 4 }}
type: Opaque
data:
  {{- if .Values.opensearch.config }}
  opensearch.yml: {{ include "opensearch.config" . | b64enc | quote }}
  {{- end }}
  {{- if (include "opensearch.log4jConfig" .) }}
  log4j2.properties: {{ include "opensearch.log4jConfig" . | b64enc | quote }}
  {{- end }}
  logging.yml: {{ toYaml .Values.opensearch.loggingConfig | b64enc | quote }}
stringData:
  jvm.options: |-
    ## JVM configuration

    ################################################################
    ## IMPORTANT: JVM heap size
    ################################################################
    ##
    ## You should always set the min and max JVM heap
    ## size to the same value. For example, to set
    ## the heap to 4 GB, set:
    ##
    ## -Xms4g
    ## -Xmx4g
    ##
    ## See https://opensearch.org/docs/opensearch/install/important-settings/
    ## for more information
    ##
    ################################################################

    # Xms represents the initial size of total heap space
    # Xmx represents the maximum size of total heap space

    -Xms1g
    -Xmx1g

    ################################################################
    ## Expert settings
    ################################################################
    ##
    ## All settings below this section are considered
    ## expert settings. Don't tamper with them unless
    ## you understand what you are doing
    ##
    ################################################################

    ## GC configuration
    8-10:-XX:+UseConcMarkSweepGC
    8-10:-XX:CMSInitiatingOccupancyFraction=75
    8-10:-XX:+UseCMSInitiatingOccupancyOnly

    ## G1GC Configuration
    # NOTE: G1 GC is only supported on JDK version 10 or later
    # to use G1GC, uncomment the next two lines and update the version on the
    # following three lines to your version of the JDK
    # 10:-XX:-UseConcMarkSweepGC
    # 10:-XX:-UseCMSInitiatingOccupancyOnly
    11-:-XX:+UseG1GC
    11-:-XX:G1ReservePercent=25
    11-:-XX:InitiatingHeapOccupancyPercent=30

    ## JVM temporary directory
    -Djava.io.tmpdir=${OPENSEARCH_TMPDIR}

    ## heap dumps

    # generate a heap dump when an allocation from the Java heap fails
    # heap dumps are created in the working directory of the JVM
    -XX:+HeapDumpOnOutOfMemoryError

    # specify an alternative path for heap dumps; ensure the directory exists and
    # has sufficient space
    -XX:HeapDumpPath=data

    # specify an alternative path for JVM fatal error logs
    -XX:ErrorFile=logs/hs_err_pid%p.log

    {{ if .Values.opensearch.gcLoggingEnabled -}}
    ## JDK 8 GC logging
    8:-XX:+PrintGCDetails
    8:-XX:+PrintGCDateStamps
    8:-XX:+PrintTenuringDistribution
    8:-XX:+PrintGCApplicationStoppedTime
    8:-Xloggc:logs/gc.log
    8:-XX:+UseGCLogFileRotation
    8:-XX:NumberOfGCLogFiles=32
    8:-XX:GCLogFileSize=64m

    # JDK 9+ GC logging
    9-:-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=2,filesize=64m
    {{- end }}

    # JDK 20+ Incubating Vector Module for SIMD optimizations;
    # disabling may reduce performance on vector optimized lucene
    20-:--add-modules=jdk.incubator.vector

    # See please https://bugs.openjdk.org/browse/JDK-8341127 (openjdk/jdk#21283)
    23:-XX:CompileCommand=dontinline,java/lang/invoke/MethodHandle.setAsTypeCache
    23:-XX:CompileCommand=dontinline,java/lang/invoke/MethodHandle.asTypeUncached

    21-:-javaagent:agent/opensearch-agent.jar
    21-:--add-opens=java.base/java.nio=org.apache.arrow.memory.core,ALL-UNNAMED
{{- end }}
