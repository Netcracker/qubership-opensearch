{{- if  not .Values.global.externalOpensearch.enabled }}
#TODO: ask Sergei about parameters
{{- if not (and .Values.opensearch.securityConfig.config.securityConfigSecret .Values.opensearch.securityConfig.config.data) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "opensearch.fullname" . }}-security-configuration
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "opensearch.labels.standard" . | indent 4 }}
{{ include "opensearch-service.defaultLabels" . | indent 4 }}
type: Opaque
stringData:
  config.yml: |-
    _meta:
      type: "config"
      config_version: 2

    config:
      dynamic:
        http:
          anonymous_auth_enabled: false
          xff:
            enabled: false
            internalProxies: '192\.168\.0\.10|192\.168\.0\.11' # regex pattern
        authc:
          basic_internal_auth_domain:
            description: "Authenticate via HTTP Basic against internal users database"
            http_enabled: true
            transport_enabled: true
            order: 4
            http_authenticator:
              type: basic
              challenge: true
            authentication_backend:
              type: intern
    {{- if .Values.opensearch.securityConfig.authc.oidc.openid_connect_url }}
          openid_auth_domain:
            http_enabled: true
            transport_enabled: true
            order: 0
            http_authenticator:
              type: openid
              challenge: false
              config:
                subject_key: {{ .Values.opensearch.securityConfig.authc.oidc.subject_key | default "preferred_username" | quote }}
                openid_connect_url: {{ .Values.opensearch.securityConfig.authc.oidc.openid_connect_url | quote }}
                roles_key: {{ .Values.opensearch.securityConfig.authc.oidc.roles_key | default "preferred_username" | quote }}
            authentication_backend:
              type: noop
    {{- end }}
    {{- if .Values.opensearch.securityConfig.ldap.enabled }}
          ldap:
            http_authenticator:
              type: basic
              challenge: true
            order: 5
            authentication_backend:
              type: ldap
              config:
                enable_ssl: {{ .Values.opensearch.securityConfig.ldap.enableSsl }}
                hosts:
                  - {{ .Values.opensearch.securityConfig.ldap.host }}
                bind_dn: {{ .Values.opensearch.securityConfig.ldap.managerDn }}
                password: {{ .Values.opensearch.securityConfig.ldap.managerPassword }}
                userbase: {{ .Values.opensearch.securityConfig.ldap.search.base }}
                usersearch: {{ .Values.opensearch.securityConfig.ldap.search.filter }}
                username_attribute: {{ .Values.opensearch.securityConfig.ldap.search.usernameAttribute }}
        authz:
          ldap:
            http_enabled: true
            transport_enabled: true
            authorization_backend:
              type: ldap
              config:
                enable_ssl: {{ .Values.opensearch.securityConfig.ldap.enableSsl }}
                hosts:
                  - {{ .Values.opensearch.securityConfig.ldap.host }}
                bind_dn: {{ .Values.opensearch.securityConfig.ldap.managerDn }}
                password: {{ .Values.opensearch.securityConfig.ldap.managerPassword }}
                userbase: {{ .Values.opensearch.securityConfig.ldap.search.base }}
                usersearch: {{ .Values.opensearch.securityConfig.ldap.search.filter }}
                username_attribute: {{ .Values.opensearch.securityConfig.ldap.search.usernameAttribute }}
                userrolename: {{ .Values.opensearch.securityConfig.ldap.search.userrolename }}
                {{- if .Values.opensearch.securityConfig.ldap.search.roleSearchEnabled }}
                rolesearch_enabled: true
                rolebase: {{ .Values.opensearch.securityConfig.ldap.search.rolebase }}
                rolesearch: {{ .Values.opensearch.securityConfig.ldap.search.rolesearch }}
                rolename: {{ .Values.opensearch.securityConfig.ldap.search.rolename }}
                {{- else }}
                rolesearch_enabled: false
                {{- end }}
    {{- end }}
  roles.yml: |-
    _meta:
      type: "roles"
      config_version: 2
    anomaly_full_access:
      reserved: true
      cluster_permissions:
        - 'cluster_monitor'
        - 'cluster:admin/opensearch/ad/*'
      index_permissions:
        - index_patterns:
            - '*'
          allowed_actions:
            - 'indices_monitor'
            - 'indices:admin/aliases/get'
            - 'indices:admin/mappings/get'
  roles_mapping.yml: |-
    _meta:
      type: "rolesmapping"
      config_version: 2
    opensearch_security_anonymous:
      backend_roles:
        - opensearch_security_anonymous_backendrole
    all_access:
      backend_roles:
        - admin
      reserved: false
      description: "Maps admin to all_access"
  tenants.yml: |-
    _meta:
      type: "tenants"
      config_version: 2
  action_groups.yml: |-
    _meta:
      type: "actiongroups"
      config_version: 2
  nodes_dn.yml: |-
    _meta:
      type: "nodesdn"
      config_version: 2
  whitelist.yml: |-
    _meta:
      type: "whitelist"
      config_version: 2
{{- end }}
{{- end }}
